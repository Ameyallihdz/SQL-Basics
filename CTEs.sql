--1.Write a query that defines a CTE named "Sales_CTE", which is based on the Order header table, and contains the following columns: Order Number, SalesPersonID,
--the year in which the order was placed. Analyze only the data that has a value in the SalesPersonID column.
--Use the CTE you defined, and write a query that shows the amount of orders that each salesperson generated each year. Sort the query results by SalesPersonID and year.
--Note: With the results of the query, it is possible to evaluate the salespeople's performance, and see whether the salesperson improved their performance or it
--needs to be strengthened. In addition, take into account when examining the results that data is not provided for all the months in 2011 and 2014.
with SalesCTE (SalesOrderNumber, SalesPersonID, OrderYear) 
	as (select SalesOrderNumber, SalesPersonID, year(OrderDate) as OrderYear
		from Sales.SalesOrderHeader
		where SalesPersonID is not NULL)
select SalesPersonID, count(*) as QTYOrders, OrderYear
from SalesCTE
group by SalesPersonID, OrderYear
order by SalesPersonID, OrderYear

--2.Write a query that shows the average number of orders for all the years, for all the salespeople. Analyze only the data that has a value in the SalesPersonID column:
			--a. Define a CTE named "Sales_CTE", which is based on the Order header table, and contains the following columnsSalesPersonID, the amount of orders
			   --generated by the salesperson.
			--b. Write a query based on the CTE that displays the average order quantity of all the salespeople.
with SalesCTE (SalesPersonID, QTYOrders) as (select SalesPersonID, count(*) as QTYOrders
									from Sales.SalesOrderHeader
									where SalesPersonID is not NULL
									group by SalesPersonID)
select avg(QTYOrders) as AvgOrdersSold
from SalesCTE

--3.Write a query that defines a CTE named "Person_CTE", which is based on the Sales.Customer and Person.Person tables and contains the following columns:
--CustomerID, first name and last name. The purpose of the CTE is to make it easier for us to link the Sales.SalesOrderHeader table to the Person.Person table.
--Use the Order header table and the Person_CTE that you defined to write a query that displays the order number, customer number, first name, last name, and SubTotal.
with PersonCTE as (select sc.PersonID, pp.FirstName, pp.LastName
															from Person.Person pp join Sales.Customer sc on pp.BusinessEntityID=sc.PersonID)
select soh.SalesOrderID, soh.CustomerID, pcte.FirstName, pcte.LastName, SubTotal
from Sales.SalesOrderHeader soh join PersonCTE pcte on soh.CustomerID=pcte.PersonID


--4.Write a query that displays the amount of orders per product color in 2013, sorted from highest to lowest. Use a CTE to simplify the query:
			--a. Define a CTE named "Sales_CTE", which contains the following columns: Order number, OrderDate, ProductID and OrderQty.
			--b. Use the CTE and the Product table to display the amount of orders per product color in 2013, sorted from highest to lowest
			--c. Note: The query could also be solved without using a CTE. However, it helps to keep the code clean, tidy and legible when splitting the queries into parts.
with SalesCTE as (select soh.SalesOrderNumber, soh.OrderDate, sod.ProductID, sod.OrderQty
					from Sales.SalesOrderHeader soh join Sales.SalesOrderDetail sod on soh.SalesOrderID=sod.SalesOrderID)
select pp.Color, sum(scte.OrderQTY) as QTYOrders
from Production.Product pp join SalesCTE scte on pp.ProductID=scte.ProductID
where year(scte.OrderDate)=2013
group by pp.Color
order by QTYOrders desc

--CTE TABLES
--Write a query that displays the details of the products that were sold, and the amount of income from the sales of each product.
--Display Item#, ItemName, SubcategoryCode and IncomeSales of the item
--Without CTE
select sod.ProductID, pp.ProductSubcategoryID, sub.Name, sum(sod.LineTotal) as Sales
from Production.Product pp join Sales.SalesOrderDetail sod on pp.ProductID=sod.ProductID
							join Production.ProductSubcategory sub on pp.ProductSubcategoryID=sub.ProductSubcategoryID
group by sod.ProductID, pp.ProductSubcategoryID, sub.Name

--With CTE
with products
	as (select pp.ProductID, sub.ProductSubcategoryID, sub.Name
		from Production.Product pp join Production.ProductSubcategory sub on pp.ProductSubcategoryID=sub.ProductSubcategoryID
		),
	sales
	as(select ProductID, sum(LineTotal) Sales
		from Sales.SalesOrderDetail
		group by ProductID
		)
select s.ProductID, p.Name, p.ProductSubcategoryID, s.Sales
from Sales s left join Products p on p.ProductID=s.ProductID

--PART2
--1.In order to prepare an annual order report by customer, which includes both the customer's details and the summarized sales data, proceed according to:
	--a. Define a Person_CTE, based on the Sales.Customer and Person.Person tables, which displays the following columns: CustomerID, First name, and Last name.
	--b. Define a Sales_CTE that compiles the number of orders and SubTotals for each year and customer, in the following columns: 
	   --CustomerID, Year, Total order quantity and SubTotal.
	--c. Join between the two CTEs you created in the two preceding sections. Display only the data for 2012.
	--d. A point to consider: Where should the filter to display only 2012 data be placed – in the query or in the CTE?

with Person_CTE
	as(select sc.CustomerID, pp.FirstName, pp.LastName
		from Sales.Customer sc join Person.Person pp on sc.PersonID=pp.BusinessEntityID
		),
	Sales_CTE
	as(select sum(sod.OrderQTY) as TotalQTY, year(soh.OrderDate) as OrderYear, soh.CustomerID, sum(soh.SubTotal) as SumSubtotal
		from Sales.SalesOrderDetail sod join Sales.SalesOrderHeader soh on sod.SalesOrderID=soh.SalesOrderID
		--where year(soh.OrderDate)=2012
		group by soh.CustomerID, year(soh.OrderDate)
		--order by soh.CustomerID
	)
select *
from Person_CTE pcte join Sales_CTE scte on pcte.CustomerID=scte.CustomerID
where OrderYear=2012 --Se filtra en CTE o aqui pero con el OrderYear sacado de la CTE de Sales

--2.In order to compare the quantity of items offered and the quantity ordered for each color, 
--write a query that displays the product color, the quantity of units of each color ordered, the quantity of order rows per color, and the quantity of items
--of each color offered in the Products table. Instruction:
	--e. Define a CTE that is based on the Order details and Products tables and contains the following columns: color, total order quantity and quantity of order rows.
	--f. Define a CTE that is based on the Products table only and contains the following columns: color, quantity of products per color.
	--g. Use the two CTEs you defined, and display the following columns for all the colors (i.e., without colorless products): color, total order quantity, total
	--orders, and quantity of products of this color in the Products table.
with OrderPerProduct_CTE
	as (select pp.Color, sum(sod.OrderQty) as TotalQTY, count(*) as TotalSalesperColor
		from Sales.SalesOrderDetail sod join Production.Product pp on sod.ProductID=pp.ProductID
		group by pp.Color),
	Product_CTE
	as	(select Color, Count(*) as QTYperColor
		from Production.Product
		group by Color)
select octe.Color, TotalQTY, TotalSalesperColor,QTYperColor
from OrderPerProduct_CTE octe join Product_CTE pcte on octe.Color=pcte.Color

--WITHOUT CTE?
select pp.Color, sum(sod.OrderQty) as TotalQTY, count(*) as TotalSalesperColor, Count(*) as QTYperColor
from Production.Product pp join Sales.SalesOrderDetail sod on pp.ProductID=sod.ProductID
where pp.Color is not NULL
group by pp.Color
